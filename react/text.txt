Які проблеми вирішує реакт.
Це сінг пейдж аплікейшин.
Тобто пользовательль загружає один індекс файл що прискорю у подальшому роботу на самим приложением
Це у реакта комопнентний підхід .Створюючи які ми можемо перекористовувати у нашому додадку 
Та ми працємо через віртиал дом,за рахунок цієї концепціїї це прискорю разробку та затратність памяті коли домтукуємось через дом дерево
та реакт сам почина відсліджувати за змінати в інтерфейсів,тобто в ручну дом дерево змінювати не потрібно .Ми змінюємо дані ареакти 
автомотично під них підлаштовується

React
Бібліотека для створення пользувательських інтерфейсів
-він не залежний від браузера
За відрісовку та рендерінх відповідає бібліотека реат дом 
-Сінг пейдж аплікатіон


Реакт має компонентний підхід.Та використовуємо ʼїх як кірпічики
і ці ж компоненти можемо перекористовувати 

Реакт під копотом створює віртиал дом(дерево реакт елементов).це більш лігковісна копія дом дерева в контексті браузері
коли у вузлах відбулись якісь зміни вони не вносять в дом дерево відразу.Замість цього реакти сторює новий віртуал дом зі змінненими значеннями 
та зрівнює з попереднім=ця стадія називається соггласования(reconciliation)
Після цього як реат знайшов відміннсто тоді переходить у стадію відрисовки(рендерінг) в дом дерево
і при цьому є пріорітетність у змінах

 jsx-розширение js для упращение написание кода

 состояния
класовие компоненти и функциональние компоненти

 useState-для управление состояниям
 const [state,setState]=useState
 useRef=получить доступ к дом елементу і забрать валие 
 в инпута указать проп реф и сиилку на useRef
 и в етой силке будет поле киррент валие
const bodyInputRef=useRef()

UseMemo(callback,deps)
второй параметр масив зависимостей
колбек должен возрощать результат вичеслений какихто
вона производит вичеслени запоминает ети вичесление и кишируєт
і на каждую перерисовку компоненкта не перечитуєт заново
она достает отсортирований масив из кеша
но когда одна із зависимостей меняєть тогда опетя перерсчутує


 useEffect
принимает некоторий колбек і ммасив зависимости
когда масив зависимостей пустой одработает единожди колбек в момент монтирование 
следит за измениениями і когда неокторие изменение приоисходять отрабатует колбек
і ретур делает очистку когда компонент розмонитружться


 useRef
 
 useCallback
 useContext
создать глоюальное хранилише і обращаться 
і с помощу хука обращаться ігнорирую вложеності

 хуки 
єто некоторие функции которие предоставляєт реакт
ети функции ничинаються со слова use
можна использовать у функциональних компонентах
или в кастомних хуках
хукит можна использовать только на верхних уровнях вложености
не може вкладивать в условия цикли 

когда создаються списки обезательно вказовать ключ
и он должен хранить уникальное значение обекта как правило ид обекта
ключи позволяють делать рендеринг и перерисововать не весь список а только те елементи которие изменились

непрввляемий или не контролиюваний если не не вещаем на его обработчики собитий

пропси некоторие аргументи параметири которий может принимать компоненти
із вне но обмен пропсами идет сверху в називається
от родителя к дочернему компонентку
но с помощю колебака можна все решить

условная отрисовка можна сделать с помощю трернарника